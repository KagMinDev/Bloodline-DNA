import { LinearGradient } from "expo-linear-gradient";
import React, { useRef } from "react";
import { Animated, Image, ScrollView, Text, TouchableOpacity, View } from "react-native";
import { Activity, ArrowRight, Clipboard, Heart, Shield, UserCheck } from "react-native-feather";
import styles from "./styles";
import { useNavigation } from "@react-navigation/native";
import type { NativeStackNavigationProp } from "@react-navigation/native-stack";
import type { RootStackParamList } from "@/types/root-stack/stack.types"; // s·ª≠a l·∫°i ƒë√∫ng ƒë∆∞·ªùng d·∫´n types n·∫øu kh√°c

export const ServicesSection: React.FC = () => {
  const scrollViewRef = useRef<ScrollView>(null);
  const navigation =
    useNavigation<NativeStackNavigationProp<RootStackParamList>>();

  const serviceCards = [
    {
      id: 1,
      title: "C·∫•p C·ª©u 24/7",
      description:
        "D·ªãch v·ª• y t·∫ø c·∫•p c·ª©u 24/7 v·ªõi ƒë·ªôi ng≈© chuy√™n gia y t·∫ø gi√†u kinh nghi·ªám s·∫µn s√†ng x·ª≠ l√Ω c√°c t√¨nh hu·ªëng nguy c·∫•p.",
      image: "https://c.animaapp.com/mbgey19id5YPrV/img/rectangle-20-5.png",
      hasOverlay: true,
      hasFloatingIcon: false,
      overlayIcon: Heart,
      category: "C·∫•p C·ª©u",
      price: "24/7 Lu√¥n S·∫µn S√†ng",
    },
    {
      id: 2,
      title: "Kh√°m S·ª©c Kh·ªèe ƒê·ªãnh K·ª≥",
      description:
        "Kh√°m s·ª©c kh·ªèe to√†n di·ªán v√† chƒÉm s√≥c ph√≤ng ng·ª´a ƒë·ªÉ gi√∫p duy tr√¨ s·ª©c kh·ªèe t·ªëi ∆∞u.",
      image: "https://c.animaapp.com/mbgey19id5YPrV/img/rectangle-20-5.png",
      hasOverlay: false,
      hasFloatingIcon: true,
      floatingIcon: Shield,
      category: "Ph√≤ng Ng·ª´a",
      price: "T·ª´ 1.500.000ƒë",
    },
    {
      id: 3,
      title: "T∆∞ V·∫•n Chuy√™n Khoa",
      description:
        "T∆∞ v·∫•n chuy√™n s√¢u v·ªõi c√°c b√°c sƒ© chuy√™n khoa ƒë∆∞·ª£c ch·ª©ng nh·∫≠n trong nhi·ªÅu lƒ©nh v·ª±c y t·∫ø.",
      image: "https://c.animaapp.com/mbgey19id5YPrV/img/rectangle-20-5.png",
      hasOverlay: false,
      hasFloatingIcon: true,
      floatingIcon: Activity,
      category: "T∆∞ V·∫•n",
      price: "T·ª´ 2.000.000ƒë",
    },
    {
      id: 4,
      title: "Theo D√µi S·ª©c Kh·ªèe",
      description:
        "Theo d√µi s·ª©c kh·ªèe li√™n t·ª•c v√† c√°c k·∫ø ho·∫°ch chƒÉm s√≥c c√° nh√¢n h√≥a.",
      image: "https://c.animaapp.com/mbgey19id5YPrV/img/rectangle-20-5.png",
      hasOverlay: false,
      hasFloatingIcon: true,
      floatingIcon: UserCheck,
      category: "Theo D√µi",
      price: "T·ª´ 990.000ƒë/th√°ng",
    },
    {
      id: 5,
      title: "D·ªãch V·ª• X√©t Nghi·ªám",
      description:
        "X√©t nghi·ªám v√† ch·∫©n ƒëo√°n hi·ªán ƒë·∫°i v·ªõi k·∫øt qu·∫£ nhanh ch√≥ng, ch√≠nh x√°c.",
      image: "https://c.animaapp.com/mbgey19id5YPrV/img/rectangle-20-5.png",
      hasOverlay: false,
      hasFloatingIcon: true,
      floatingIcon: Clipboard,
      category: "Ch·∫©n ƒêo√°n",
      price: "T·ª´ 750.000ƒë",
    },
    {
      id: 6,
      title: "Kh√°m T·ª´ Xa",
      description:
        "T∆∞ v·∫•n s·ª©c kh·ªèe tr·ª±c tuy·∫øn t·∫°i nh√† v·ªõi c√°c nh√† cung c·∫•p d·ªãch v·ª• chƒÉm s√≥c s·ª©c kh·ªèe.",
      image: "https://c.animaapp.com/mbgey19id5YPrV/img/rectangle-20-5.png",
      hasOverlay: false,
      hasFloatingIcon: true,
      floatingIcon: Activity,
      category: "ChƒÉm S√≥c ·∫¢o",
      price: "T·ª´ 1.200.000ƒë",
    },
  ];

  const handleCardPress = (cardId: number) => {
    console.log("Card pressed:", cardId);
  };

  return (
    <View style={styles.container}>
      {/* Section header */}
      <View style={styles.headerContainer}>
        <Text style={styles.subtitle}>D·ªäCH V·ª§ C·ª¶A CH√öNG T√îI</Text>
        <Text style={styles.title}>D·ªãch V·ª• Y T·∫ø Ch·∫•t L∆∞·ª£ng Cao</Text>
        <View style={styles.divider} />
        <Text style={styles.description}>
          Gi·∫£i ph√°p chƒÉm s√≥c s·ª©c kh·ªèe to√†n di·ªán ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng ƒë·ªÉ ƒë√°p ·ª©ng
          nhu c·∫ßu c√° nh√¢n c·ªßa b·∫°n.
        </Text>
      </View>

      {/* Services grid */}
      <ScrollView
        ref={scrollViewRef}
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.gridContainer}
      >
        {serviceCards.map((card, index) => {
          const IconComponent = card.hasOverlay
            ? card.overlayIcon
            : card.floatingIcon;
          const animatedValue = new Animated.Value(0);

          const translateY = animatedValue.interpolate({
            inputRange: [0, 1],
            outputRange: [50, 0],
          });

          const opacity = animatedValue.interpolate({
            inputRange: [0, 1],
            outputRange: [0, 1],
          });

          Animated.timing(animatedValue, {
            toValue: 1,
            duration: 500,
            delay: index * 150,
            useNativeDriver: true,
          }).start();

          return (
            <Animated.View
              key={card.id}
              style={[
                styles.card,
                {
                  opacity,
                  transform: [{ translateY }],
                  marginLeft: index === 0 ? 20 : 0,
                  marginRight:
                    index === serviceCards.length - 1 ? 20 : 15,
                },
              ]}
            >
              <TouchableOpacity
                activeOpacity={0.9}
                onPress={() => handleCardPress(card.id)}
              >
                {/* Card Image */}
                <View style={styles.imageContainer}>
                  <Image
                    source={{ uri: card.image }}
                    style={styles.cardImage}
                    resizeMode="cover"
                  />

                  <LinearGradient
                    colors={["rgba(0,0,0,0)", "rgba(0,0,0,0.5)"]}
                    style={styles.imageOverlay}
                  />

                  <View style={styles.categoryTag}>
                    <Text style={styles.categoryText}>{card.category}</Text>
                  </View>

                  <View style={styles.priceTag}>
                    <Text style={styles.priceText}>{card.price}</Text>
                  </View>

                  {card.hasFloatingIcon && IconComponent && (
                    <View style={styles.floatingIcon}>
                      <IconComponent width={24} height={24} color="white" />
                    </View>
                  )}
                </View>

                {/* Card Content */}
                <View style={styles.cardContent}>
                  <Text style={styles.cardTitle}>{card.title}</Text>
                  <Text
                    style={styles.cardDescription}
                    numberOfLines={3}
                    ellipsizeMode="tail"
                  >
                    {card.description}
                  </Text>

                  <TouchableOpacity style={styles.learnMoreButton}>
                    <Text style={styles.learnMoreText}>T√¨m Hi·ªÉu Th√™m</Text>
                    <ArrowRight width={16} height={16} color="#2563eb" />
                  </TouchableOpacity>
                </View>
              </TouchableOpacity>
            </Animated.View>
          );
        })}
      </ScrollView>

      {/* üëá N√∫t chuy·ªÉn trang T·∫•t C·∫£ D·ªãch V·ª• */}
      <TouchableOpacity
        onPress={() => navigation.navigate("AllService")}
        style={styles.AllService}>
        <Text style={styles.AllServiceText}>
          T·∫•t C·∫£ D·ªãch V·ª•
        </Text>
        <ArrowRight width={18} height={18} color="#1e3a8a" />
      </TouchableOpacity>

      {/* Call to action */}
      <LinearGradient
        colors={["#2563eb", "#1d4ed8"]}
        style={styles.ctaContainer}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 0 }}
      >
        <Text style={styles.ctaTitle}>S·∫µn S√†ng B·∫Øt ƒê·∫ßu?</Text>
        <Text style={styles.ctaDescription}>
          Li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay h√¥m nay ƒë·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n
        </Text>
        <TouchableOpacity style={styles.ctaButton}>
          <Text style={styles.ctaButtonText}>ƒê·∫∑t L·ªãch H·∫πn</Text>
        </TouchableOpacity>
      </LinearGradient>
    </View>
  );
};
