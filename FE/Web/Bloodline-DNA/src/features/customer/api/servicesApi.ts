import axios from "axios";
import { BASE_URL } from "../../../apis/rootApi";

// ===== INTERFACES =====
// API Response interfaces matching the backend structure
export interface TestService {
  id: string;
  serviceId: string;
  price: number;
  collectionMethod: number;
  currency: string;
  effectiveFrom: string;
  effectiveTo: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  testServiceInfor: {
    id: string;
    name: string;
    description: string;
    category: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    priceServices: string[];
  };
}

// Service Detail Response interface
export interface ServiceDetail {
  id: string;
  name: string;
  description: string;
  category: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  price: number; // Add price at the top level
  turnaroundTime?: string; // Optional: e.g., "3-5 business days"
  faqs?: { question: string; answer: string }[]; // Optional: for service-specific FAQs
  priceServices: {
    id: string;
    serviceId: string;
    price: number;
    collectionMethod: number;
    currency: string | null;
    effectiveFrom: string;
    effectiveTo: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    testServiceInfor: {
      id: string;
      name: string;
      description: string;
      category: string;
      isActive: boolean;
      createdAt: string;
      updatedAt: string;
      priceServices: any;
      sampleCount: number;
    };
  }[];
  sampleCount: number;
}

export const servicesApi = async () => {
    try {
      // Try multiple token sources
      const token = localStorage.getItem('token') || 
                    localStorage.getItem('authToken') || 
                    sessionStorage.getItem('token') ||
                    sessionStorage.getItem('authToken') ||
                    // Fallback token for testing
                    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjI2MDNCN0Q2OUFFMTgxNzAiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoibGFsYWxhbGEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJsYTEyQGdtYWlsLmNvbSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkNsaWVudCIsImp0aSI6IjBkZjM5ZTEwLTRhNTktNDFlMC1hZGIzLTE4OWM1Mjg1Mjg3MCIsImV4cCI6MTc1MDIyNDgwNSwiaXNzIjoieW91cmRvbWFpbi5jb20iLCJhdWQiOiJ5b3VyZG9tYWluLmNvbSJ9.6ucR2Zmu8Ti5hyUUxVmMfytX37uAkfQ86LsKcDtwV-0';
      
      console.log('üöÄ Starting servicesApi call...');
      console.log('üîë Token being used:', token ? `${token.substring(0, 20)}...` : 'No token');
      console.log('üìã API URL:', `${BASE_URL}/ServicePrice/latest`);
      console.log('üåê Base URL:', BASE_URL);
      
      const response = await axios.get(`${BASE_URL}/ServicePrice/latest`, {
        headers: {
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000, // 10 second timeout
      });
  
      console.log('‚úÖ API Response received');
      console.log('üìä Response status:', response.status);
      console.log('üì¶ Raw API Response:', response.data);
      console.log('üìù Response type:', typeof response.data);
      console.log('üîç Is array?:', Array.isArray(response.data));
      
      // Handle responses with $values for circular references
      if (response.data && response.data.$values) {
        console.log('üîÑ Found $values structure, extracting...');
        return response.data.$values;
      }
      
      // Handle standard array responses
      if (Array.isArray(response.data)) {
        console.log('üìã Direct array response detected');
        return response.data;
      }
      
      // Handle wrapped responses
      if (response.data && typeof response.data === 'object') {
        console.log('üì¶ Object response detected, checking for data property...');
        if (response.data.data) {
          console.log('üîÑ Found data property, extracting...');
          return Array.isArray(response.data.data) ? response.data.data : [response.data.data];
        }
      }
      
      console.log('‚ö†Ô∏è Unexpected response structure, returning as-is');
      return response.data;
      
    } catch (error) {
      console.error('‚ùå servicesApi Error Details:');
      console.error('üìç Error type:', error?.constructor?.name);
      console.error('üìÑ Full error object:', error);
      
      if (axios.isAxiosError(error)) {
        console.error('üåê Axios Error Details:');
        console.error('üìä Status Code:', error.response?.status);
        console.error('üìù Status Text:', error.response?.statusText);
        console.error('üì¶ Response Data:', error.response?.data);
        console.error('üîó Request URL:', error.config?.url);
        console.error('‚öôÔ∏è Request Method:', error.config?.method);
        console.error('üîë Request Headers:', error.config?.headers);
        console.error('‚è±Ô∏è Error Code:', error.code);
        console.error('üí¨ Error Message:', error.message);
        
        // Categorize errors with detailed messages
        if (error.response?.status === 401) {
          throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ xem d·ªØ li·ªáu th·ª±c t·ª´ API.');
        } else if (error.response?.status === 403) {
          throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p endpoint n√†y. Vui l√≤ng ki·ªÉm tra quy·ªÅn h·∫°n t√†i kho·∫£n.');
        } else if (error.response?.status === 404) {
          throw new Error('Endpoint API kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra URL API ho·∫∑c li√™n h·ªá admin.');
        } else if (error.response?.status && error.response.status >= 500) {
          throw new Error('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin.');
        } else if (error.code === 'ECONNABORTED') {
          throw new Error('K·∫øt n·ªëi API qu√° ch·∫≠m (timeout). Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.');
        } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {
          throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.');
                 } else {
           // Extract server message with more detail
           const serverMessage =
             error.response?.data?.message ||
             error.response?.data?.title ||
             error.response?.data?.error ||
             error.response?.data?.detail ||
             `L·ªói HTTP ${error.response?.status ?? 'Unknown'}: ${error.response?.statusText || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API'}`;
           throw new Error(serverMessage);
         }
       } else {
         // Non-Axios errors
         console.error('üö´ Non-Axios Error Details:');
         console.error('üí¨ Error Message:', (error as Error)?.message);
         console.error('üìö Error Stack:', (error as Error)?.stack);
         
         if (error instanceof TypeError) {
           throw new Error('L·ªói c·∫•u h√¨nh API ho·∫∑c URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng li√™n h·ªá admin.');
         } else if (error instanceof SyntaxError) {
           throw new Error('L·ªói ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ server. Vui l√≤ng th·ª≠ l·∫°i sau.');
         } else {
           throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${(error as Error)?.message || 'Unknown error'}. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin.`);
         }
      }
    }
};

// Get service detail by ID
export const getServiceById = async (serviceId: string): Promise<ServiceDetail> => {
  try {
    // Try multiple token sources
    const token = localStorage.getItem('token') || 
                  localStorage.getItem('authToken') || 
                  sessionStorage.getItem('token') ||
                  sessionStorage.getItem('authToken') ||
                  // Fallback token for testing
                  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjI2MDNCN0Q2OUFFMTgxNzAiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoibGFsYWxhbGEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJsYTEyQGdtYWlsLmNvbSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkNsaWVudCIsImp0aSI6IjBkZjM5ZTEwLTRhNTktNDFlMC1hZGIzLTE4OWM1Mjg1Mjg3MCIsImV4cCI6MTc1MDIyNDgwNSwiaXNzIjoieW91cmRvbWFpbi5jb20iLCJhdWQiOiJ5b3VyZG9tYWluLmNvbSJ9.6ucR2Zmu8Ti5hyUUxVmMfytX37uAkfQ86LsKcDtwV-0';
    
    console.log('üîç Fetching service detail by ID:', serviceId);
    
    // Try multiple possible endpoints
    const possibleEndpoints = [
      `${BASE_URL}/TestService/${serviceId}`,
      `${BASE_URL}/TestServiceInfor/${serviceId}`,
      `${BASE_URL}/ServicePrice/${serviceId}`,
      `${BASE_URL}/api/TestService/${serviceId}`,
      `${BASE_URL}/api/services/${serviceId}`
    ];
    
    let lastError: any = null;
    
    for (const endpoint of possibleEndpoints) {
      try {
        console.log('üîÑ Trying endpoint:', endpoint);
        
        const response = await axios.get(endpoint, {
          headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          timeout: 10000, // 10 second timeout
        });

        console.log('üì¶ Raw Service Detail Response:', response.data);
        console.log('üì¶ Response data keys:', Object.keys(response.data || {}));
        
        // Handle different response structures
        let rawData: any;
        
        if (response.data?.data) {
          // Response has data wrapper
          rawData = response.data.data;
          console.log('üîÑ Using wrapped data:', rawData);
        } else if (response.data) {
          // Direct response
          rawData = response.data;
          console.log('üîÑ Using direct response:', rawData);
        } else {
          throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu d·ªãch v·ª•');
        }
        
        console.log('üîç Raw data:', rawData);
        console.log('üîç Raw data keys:', Object.keys(rawData || {}));
        console.log('üîç Raw data.name:', rawData?.name);
        console.log('üîç Raw data.testServiceInfor:', rawData?.testServiceInfor);
        
        // --- Data Transformation Logic ---
        const transformToServiceDetail = (data: any): ServiceDetail => {
          const firstPriceService = data.priceServices?.[0];
          
          return {
            id: data.id,
            name: data.name,
            description: data.description,
            category: data.category,
            isActive: data.isActive,
            createdAt: data.createdAt,
            updatedAt: data.updatedAt,
            price: firstPriceService?.price || 0, // Extract price
            turnaroundTime: data.turnaroundTime || "3-5 ng√†y", // Add default
            faqs: data.faqs || [], // Add default
            priceServices: data.priceServices || [],
            sampleCount: data.sampleCount || 0,
          };
        };

        return transformToServiceDetail(rawData);

      } catch (endpointError) {
        console.warn('Endpoint failed:', endpoint, (endpointError as Error).message);
        lastError = endpointError;
        
        // If this is the special case where testServiceInfor is null, 
        // immediately go to fallback instead of trying more endpoints
        if ((endpointError as Error)?.message === 'testServiceInfor_is_null') {
          console.log('üîÑ testServiceInfor is null, going to fallback immediately');
          break;
        }
        
        continue; // Try next endpoint
      }
    }
    
    // If all endpoints failed, try to get from services list as fallback
    console.log('üîÑ All endpoints failed, trying fallback method...');
    try {
      const allServices = await servicesApi();
      const matchedService = allServices.find((service: TestService) => 
        service.id === serviceId || service.serviceId === serviceId
      );
      
      if (matchedService) {
        console.log('‚úÖ Found service in list, creating detail object');
        console.log('üîç MatchedService:', matchedService);
        console.log('üîç TestServiceInfor:', matchedService.testServiceInfor);
        
        // Check if testServiceInfor exists and has the name
        if (matchedService.testServiceInfor) {
          console.log('üîç TestServiceInfor.name:', matchedService.testServiceInfor.name);
          console.log('üîç TestServiceInfor keys:', Object.keys(matchedService.testServiceInfor));
          
          // Create a ServiceDetail object from TestService
          const serviceDetail: ServiceDetail = {
            id: matchedService.testServiceInfor.id,
            name: matchedService.testServiceInfor.name,
            description: matchedService.testServiceInfor.description,
            category: matchedService.testServiceInfor.category,
            isActive: matchedService.testServiceInfor.isActive,
            createdAt: matchedService.testServiceInfor.createdAt,
            updatedAt: matchedService.testServiceInfor.updatedAt,
            price: matchedService.price, // Assuming price is directly available
            turnaroundTime: "3-5 ng√†y", // Default for fallback
            faqs: [], // Default for fallback
            priceServices: [{
              id: matchedService.id,
              serviceId: matchedService.serviceId,
              price: matchedService.price,
              collectionMethod: matchedService.collectionMethod,
              currency: matchedService.currency,
              effectiveFrom: matchedService.effectiveFrom,
              effectiveTo: matchedService.effectiveTo,
              isActive: matchedService.isActive,
              createdAt: matchedService.createdAt,
              updatedAt: matchedService.updatedAt,
              testServiceInfor: {
                ...matchedService.testServiceInfor,
                sampleCount: 0
              }
            }],
            sampleCount: 0
          };
          
          return serviceDetail;
        } else {
          // testServiceInfor is null, create a minimal ServiceDetail with defaults
          console.log('‚ö†Ô∏è testServiceInfor is null, creating minimal ServiceDetail with defaults');
          const serviceDetail: ServiceDetail = {
            id: matchedService.serviceId || matchedService.id,
            name: `D·ªãch v·ª• x√©t nghi·ªám ADN (ID: ${matchedService.id})`,
            description: "D·ªãch v·ª• x√©t nghi·ªám ADN ch√≠nh x√°c, nhanh ch√≥ng v√† b·∫£o m·∫≠t.",
            category: "Civil", // Default category
            isActive: matchedService.isActive,
            createdAt: matchedService.createdAt,
            updatedAt: matchedService.updatedAt,
            price: matchedService.price, // Assuming price is directly available
            turnaroundTime: "3-5 ng√†y", // Default for fallback
            faqs: [], // Default for fallback
            priceServices: [{
              id: matchedService.id,
              serviceId: matchedService.serviceId,
              price: matchedService.price,
              collectionMethod: matchedService.collectionMethod,
              currency: matchedService.currency,
              effectiveFrom: matchedService.effectiveFrom,
              effectiveTo: matchedService.effectiveTo,
              isActive: matchedService.isActive,
              createdAt: matchedService.createdAt,
              updatedAt: matchedService.updatedAt,
              testServiceInfor: {
                id: matchedService.serviceId || matchedService.id,
                name: `D·ªãch v·ª• x√©t nghi·ªám ADN (ID: ${matchedService.id})`,
                description: "D·ªãch v·ª• x√©t nghi·ªám ADN ch√≠nh x√°c, nhanh ch√≥ng v√† b·∫£o m·∫≠t.",
                category: "Civil",
                isActive: matchedService.isActive,
                createdAt: matchedService.createdAt,
                updatedAt: matchedService.updatedAt,
                priceServices: null,
                sampleCount: 0
              }
            }],
            sampleCount: 0
          };
          
          console.log('‚úÖ Created minimal ServiceDetail with name:', serviceDetail.name);
          return serviceDetail;
        }
      }
    } catch (fallbackError) {
      console.error('‚ùå Fallback method also failed:', fallbackError);
    }
    
    // If everything fails, throw the last error
    throw lastError;
    
  } catch (error) {
    console.error('‚ùå Error in getServiceById:', error);
    
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 404) {
        throw new Error('Endpoint API kh√¥ng t·ªìn t·∫°i ho·∫∑c service ID kh√¥ng h·ª£p l·ªá');
      } else if (error.response?.status === 401) {
        throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('K·∫øt n·ªëi qu√° ch·∫≠m. Vui l√≤ng th·ª≠ l·∫°i sau');
      } else {
        const serverMessage =
          error.response?.data?.message ||
          error.response?.data?.title ||
          `L·ªói ${error.response?.status}: Kh√¥ng th·ªÉ t·∫£i th√¥ng tin d·ªãch v·ª•`;
        throw new Error(serverMessage);
      }
    } else {
      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i th√¥ng tin d·ªãch v·ª•');
    }
  }
};

