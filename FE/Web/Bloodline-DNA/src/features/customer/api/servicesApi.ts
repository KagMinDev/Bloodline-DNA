import axios from "axios";
import { BASE_URL } from "../../../apis/rootApi";

// ===== INTERFACES =====
// API Response interfaces matching the backend structure
export interface TestService {
  id: string;
  serviceId: string;
  price: number;
  collectionMethod: number;
  currency: string;
  effectiveFrom: string;
  effectiveTo: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  testServiceInfor: {
    id: string;
    name: string;
    description: string;
    category: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    priceServices: string[];
  };
}

// Service Detail Response interface
export interface ServiceDetail {
  id: string;
  name: string;
  description: string;
  category: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  priceServices: {
    id: string;
    serviceId: string;
    price: number;
    collectionMethod: number;
    currency: string | null;
    effectiveFrom: string;
    effectiveTo: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    testServiceInfor: {
      id: string;
      name: string;
      description: string;
      category: string;
      isActive: boolean;
      createdAt: string;
      updatedAt: string;
      priceServices: any;
      sampleCount: number;
    };
  }[];
  sampleCount: number;
}

export const servicesApi = async () => {
    try {
      // Try multiple token sources
      const token = localStorage.getItem('token') || 
                    localStorage.getItem('authToken') || 
                    sessionStorage.getItem('token') ||
                    sessionStorage.getItem('authToken') ||
                    // Fallback token for testing
                    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjI2MDNCN0Q2OUFFMTgxNzAiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoibGFsYWxhbGEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJsYTEyQGdtYWlsLmNvbSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkNsaWVudCIsImp0aSI6IjBkZjM5ZTEwLTRhNTktNDFlMC1hZGIzLTE4OWM1Mjg1Mjg3MCIsImV4cCI6MTc1MDIyNDgwNSwiaXNzIjoieW91cmRvbWFpbi5jb20iLCJhdWQiOiJ5b3VyZG9tYWluLmNvbSJ9.6ucR2Zmu8Ti5hyUUxVmMfytX37uAkfQ86LsKcDtwV-0';
      
      console.log('üöÄ Starting servicesApi call...');
      console.log('üîë Token being used:', token ? `${token.substring(0, 20)}...` : 'No token');
      console.log('üìã API URL:', `${BASE_URL}/ServicePrice/latest`);
      console.log('üåê Base URL:', BASE_URL);
      
      const response = await axios.get(`${BASE_URL}/ServicePrice/latest`, {
        headers: {
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000, // 10 second timeout
      });
  
      console.log('‚úÖ API Response received');
      console.log('üìä Response status:', response.status);
      console.log('üì¶ Raw API Response:', response.data);
      console.log('üìù Response type:', typeof response.data);
      console.log('üîç Is array?:', Array.isArray(response.data));
      
      // Handle responses with $values for circular references
      if (response.data && response.data.$values) {
        console.log('üîÑ Found $values structure, extracting...');
        return response.data.$values;
      }
      
      // Handle standard array responses
      if (Array.isArray(response.data)) {
        console.log('üìã Direct array response detected');
        return response.data;
      }
      
      // Handle wrapped responses
      if (response.data && typeof response.data === 'object') {
        console.log('üì¶ Object response detected, checking for data property...');
        if (response.data.data) {
          console.log('üîÑ Found data property, extracting...');
          return Array.isArray(response.data.data) ? response.data.data : [response.data.data];
        }
      }
      
      console.log('‚ö†Ô∏è Unexpected response structure, returning as-is');
      return response.data;
      
    } catch (error) {
      console.error('‚ùå servicesApi Error Details:');
      console.error('üìç Error type:', error?.constructor?.name);
      console.error('üìÑ Full error object:', error);
      
      if (axios.isAxiosError(error)) {
        console.error('üåê Axios Error Details:');
        console.error('üìä Status Code:', error.response?.status);
        console.error('üìù Status Text:', error.response?.statusText);
        console.error('üì¶ Response Data:', error.response?.data);
        console.error('üîó Request URL:', error.config?.url);
        console.error('‚öôÔ∏è Request Method:', error.config?.method);
        console.error('üîë Request Headers:', error.config?.headers);
        console.error('‚è±Ô∏è Error Code:', error.code);
        console.error('üí¨ Error Message:', error.message);
        
        // Categorize errors with detailed messages
        if (error.response?.status === 401) {
          throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ xem d·ªØ li·ªáu th·ª±c t·ª´ API.');
        } else if (error.response?.status === 403) {
          throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p endpoint n√†y. Vui l√≤ng ki·ªÉm tra quy·ªÅn h·∫°n t√†i kho·∫£n.');
        } else if (error.response?.status === 404) {
          throw new Error('Endpoint API kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra URL API ho·∫∑c li√™n h·ªá admin.');
        } else if (error.response?.status && error.response.status >= 500) {
          throw new Error('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin.');
        } else if (error.code === 'ECONNABORTED') {
          throw new Error('K·∫øt n·ªëi API qu√° ch·∫≠m (timeout). Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.');
        } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {
          throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.');
                 } else {
           // Extract server message with more detail
           const serverMessage =
             error.response?.data?.message ||
             error.response?.data?.title ||
             error.response?.data?.error ||
             error.response?.data?.detail ||
             `L·ªói HTTP ${error.response?.status ?? 'Unknown'}: ${error.response?.statusText || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API'}`;
           throw new Error(serverMessage);
         }
       } else {
         // Non-Axios errors
         console.error('üö´ Non-Axios Error Details:');
         console.error('üí¨ Error Message:', (error as Error)?.message);
         console.error('üìö Error Stack:', (error as Error)?.stack);
         
         if (error instanceof TypeError) {
           throw new Error('L·ªói c·∫•u h√¨nh API ho·∫∑c URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng li√™n h·ªá admin.');
         } else if (error instanceof SyntaxError) {
           throw new Error('L·ªói ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ server. Vui l√≤ng th·ª≠ l·∫°i sau.');
         } else {
           throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${(error as Error)?.message || 'Unknown error'}. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin.`);
         }
      }
    }
};

// Get service detail by ID
export const getServiceById = async (serviceId: string): Promise<ServiceDetail> => {
  try {
    // Try multiple token sources
    const token = localStorage.getItem('token') || 
                  localStorage.getItem('authToken') || 
                  sessionStorage.getItem('token') ||
                  sessionStorage.getItem('authToken') ||
                  // Fallback token for testing
                  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjI2MDNCN0Q2OUFFMTgxNzAiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoibGFsYWxhbGEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJsYTEyQGdtYWlsLmNvbSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkNsaWVudCIsImp0aSI6IjBkZjM5ZTEwLTRhNTktNDFlMC1hZGIzLTE4OWM1Mjg1Mjg3MCIsImV4cCI6MTc1MDIyNDgwNSwiaXNzIjoieW91cmRvbWFpbi5jb20iLCJhdWQiOiJ5b3VyZG9tYWluLmNvbSJ9.6ucR2Zmu8Ti5hyUUxVmMfytX37uAkfQ86LsKcDtwV-0';
    
    console.log('üîç Fetching service detail by ID:', serviceId);
    console.log('üìã API URL:', `${BASE_URL}/TestService/${serviceId}`);
    
    const response = await axios.get(`${BASE_URL}/TestService/${serviceId}`, {
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      timeout: 10000, // 10 second timeout
    });

    console.log('üì¶ Raw Service Detail Response:', response.data);
    
    // Handle different response structures
    let serviceDetail: ServiceDetail;
    
    if (response.data?.data) {
      // Response has data wrapper
      serviceDetail = response.data.data;
    } else if (response.data) {
      // Direct response
      serviceDetail = response.data;
    } else {
      throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu d·ªãch v·ª•');
    }
    
    console.log('‚úÖ Service detail loaded successfully:', serviceDetail);
    return serviceDetail;
    
  } catch (error) {
    console.error('‚ùå Error in getServiceById:', error);
    
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 404) {
        throw new Error('Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• v·ªõi ID n√†y');
      } else if (error.response?.status === 401) {
        throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('K·∫øt n·ªëi qu√° ch·∫≠m. Vui l√≤ng th·ª≠ l·∫°i sau');
      } else {
        const serverMessage =
          error.response?.data?.message ||
          error.response?.data?.title ||
          `L·ªói ${error.response?.status}: Kh√¥ng th·ªÉ t·∫£i th√¥ng tin d·ªãch v·ª•`;
        throw new Error(serverMessage);
      }
    } else {
      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i th√¥ng tin d·ªãch v·ª•');
    }
  }
};

