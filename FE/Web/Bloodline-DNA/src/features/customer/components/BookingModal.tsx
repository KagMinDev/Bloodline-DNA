import {
  AlertCircleIcon,
  BuildingIcon,
  CalendarIcon,
  CheckCircleIcon,
  ClockIcon,
  HomeIcon,
  MapPinIcon,
  PhoneIcon,
  UserIcon,
  X,
} from "lucide-react";
import React, { useState } from "react";
import { createBookingApi, mapFormDataToBookingRequest, getAvailableTestServicesApi, testBookingApiRequirements } from "../api/bookingCreateApi";
import { Button } from "./ui/Button";
import { Card, CardContent, CardHeader } from "./ui/Card";
import { Input } from "./ui/Input";

// Define interface locally to avoid import issues
interface CreateBookingResponse {
  id: string;
  message: string;
  success: boolean;
}

interface BookingModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit?: (bookingData: BookingData) => void;
  selectedService?: {
    id: string;
    title: string;
    category: string; // 'civil' or 'legal'
    price: string;
    collectionMethod: number; // 0 = home/self, 1 = clinic
    testServiceInfo?: {
      id: string;
      [key: string]: any;
    };
    [key: string]: any; // Allow additional properties
  };
}

interface BookingData {
  serviceType: "home" | "clinic";
  name: string;
  phone: string;
  address: string;
  preferredDate: string;
  preferredTime: string;
  notes: string;
  testType: string;
}

export const BookingModal: React.FC<BookingModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  selectedService,
}) => {
  const [formData, setFormData] = useState<BookingData>({
    serviceType: "home",
    name: "",
    phone: "",
    address: "",
    preferredDate: "",
    preferredTime: "",
    notes: "",
    testType: "civil-self",
  });

  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(1);
  const [apiError, setApiError] = useState<string | null>(null);
  const [bookingResponse, setBookingResponse] = useState<CreateBookingResponse | null>(null);
  const [enhancedSelectedService, setEnhancedSelectedService] = useState<any>(null);

  // Check if user is authenticated
  const isAuthenticated = (): boolean => {
    const token = localStorage.getItem('authToken') || 
                  localStorage.getItem('token') || 
                  localStorage.getItem('accessToken') ||
                  sessionStorage.getItem('authToken') ||
                  sessionStorage.getItem('token');
    return !!token;
  };

  // Validate testServiceId
  const validateTestServiceId = (): boolean => {
    const serviceToUse = enhancedSelectedService || selectedService;
    const testServiceId = serviceToUse?.testServiceInfo?.id || serviceToUse?.id || formData.testType;
    
    console.log('Validating testServiceId:', {
      serviceToUse,
      testServiceId,
      hasTestServiceInfo: !!serviceToUse?.testServiceInfo
    });
    
    // Check if testServiceId exists and is not an internal code
    if (!testServiceId || 
        testServiceId.includes('civil-') || 
        testServiceId.includes('legal-')) {
      console.warn('Invalid testServiceId for submission:', testServiceId);
      return false;
    }
    
    return true;
  };

  // Update formData when selectedService changes
  React.useEffect(() => {
    if (selectedService) {
      // Determine default service type based on collectionMethod
      let defaultServiceType: 'home' | 'clinic';
      if (selectedService.collectionMethod === 0) {
        defaultServiceType = 'home'; // collectionMethod 0 = T·ª± thu m·∫´u / Thu t·∫°i nh√†
      } else if (selectedService.collectionMethod === 1) {
        defaultServiceType = 'clinic'; // collectionMethod 1 = Thu m·∫´u t·∫°i trung t√¢m
      } else {
        // Fallback to home if collectionMethod is unexpected or undefined
        console.warn('Unexpected collectionMethod value:', selectedService.collectionMethod);
        defaultServiceType = 'home';
      }
      
      // Set testType to the selected service id
      const defaultTestType = selectedService.id;
      
      console.log('üîß Setting form data based on collectionMethod:', {
        collectionMethod: selectedService.collectionMethod,
        defaultServiceType,
        defaultTestType
      });
      
      setFormData(prev => ({
        ...prev,
        serviceType: defaultServiceType,
        testType: defaultTestType
      }));
    } else {
      // Reset to default if no selectedService
      setFormData(prev => ({
        ...prev,
        serviceType: 'home',
        testType: 'civil-self'
      }));
    }
  }, [selectedService]);

  // Debug: Fetch available TestServices when modal opens
  React.useEffect(() => {
    if (isOpen) {
      console.log('=== BOOKING MODAL DEBUG ===');
      console.log('selectedService object structure:', selectedService);
      console.log('selectedService.testServiceInfo:', selectedService?.testServiceInfo);
      console.log('selectedService.collectionMethod:', selectedService?.collectionMethod);
      console.log('Does selectedService have testServiceInfo?', !!selectedService?.testServiceInfo);
      console.log('selectedService keys:', selectedService ? Object.keys(selectedService) : 'no selectedService');
      
      console.log('Modal opened, fetching available TestServices for debugging...');
      getAvailableTestServicesApi().then(testServices => {
        console.log('Available TestServices in database:', testServices);
        console.log('Current selectedService:', selectedService);
        
        // Enhance selectedService with testServiceInfo if missing
        let enhancedService = { ...selectedService };
        
        if (selectedService && testServices.length > 0 && !selectedService.testServiceInfo) {
          console.log('üîß selectedService missing testServiceInfo, attempting to find it...');
          
          // Try to find matching TestService
          const matchingTestService = testServices.find((ts: any) => 
            ts.serviceId === selectedService.id ||
            ts.relatedServiceId === selectedService.id ||
            ts.id === selectedService.id ||
            (ts.name || ts.title || '').toLowerCase().includes((selectedService.title || '').toLowerCase().substring(0, 5))
          );
          
          if (matchingTestService) {
            console.log('‚úÖ Found matching TestService for enhancement:', matchingTestService);
            enhancedService = {
              ...selectedService,
              testServiceInfo: {
                id: matchingTestService.id,
                ...matchingTestService
              },
              // Ensure collectionMethod is preserved
              collectionMethod: selectedService.collectionMethod
            };
            setEnhancedSelectedService(enhancedService);
            console.log('üöÄ Enhanced selectedService with testServiceInfo:', enhancedService);
          } else {
            console.warn('‚ùå Could not find matching TestService for auto-enhancement');
            setEnhancedSelectedService(selectedService);
          }
        } else {
          setEnhancedSelectedService(selectedService);
        }
        
        // Check if selectedService.id exists in available TestServices
        if (selectedService && testServices.length > 0) {
          const selectedServiceId = selectedService?.id;
          const testServiceInfoId = selectedService?.testServiceInfo?.id;
          
          console.log('Checking IDs:', {
            selectedServiceId,
            testServiceInfoId,
            selectedServiceFull: selectedService
          });
          
          const matchingService = testServices.find((ts: any) => 
            ts.id === selectedServiceId || 
            ts.id === testServiceInfoId ||
            ts.serviceId === selectedServiceId ||
            ts.serviceId === testServiceInfoId ||
            ts.testServiceId === selectedServiceId ||
            ts.testServiceId === testServiceInfoId
          );
          
          if (matchingService) {
            console.log('‚úÖ Found matching TestService:', matchingService);
          } else {
            console.warn('‚ùå No matching TestService found');
            console.warn('selectedService.id:', selectedServiceId);
            console.warn('testServiceInfo.id:', testServiceInfoId);
            console.warn('Available TestService IDs:', testServices.map((ts: any) => ({ 
              id: ts.id, 
              serviceId: ts.serviceId,
              testServiceId: ts.testServiceId,
              name: ts.name || ts.title 
            })));
          }
        }
      }).catch(err => {
        console.error('Failed to fetch TestServices for debugging:', err);
      });
      
      // Test API requirements
      console.log('Testing API requirements...');
      testBookingApiRequirements().then(result => {
        console.log('API requirements test result:', result);
      }).catch(err => {
        console.error('API requirements test failed:', err);
      });
    }
  }, [isOpen, selectedService]);

  interface TestType {
    id: string;
    name: string;
    price: string;
    time: string;
    category: string;
  }

  // G√≥i x√©t nghi·ªám theo category v√† h√¨nh th·ª©c thu m·∫´u
  const testTypesByCategory: Record<string, Record<string, TestType[]>> = {
    civil: {
      home: [
        { id: "civil-self", name: "ADN D√¢n S·ª± - T·ª± Thu M·∫´u (Kit)", price: "1.500.000ƒë", time: "5-7 ng√†y", category: "D√¢n s·ª±" },
        { id: "civil-home", name: "ADN D√¢n S·ª± - Thu T·∫°i Nh√†", price: "2.500.000ƒë", time: "3-5 ng√†y", category: "D√¢n s·ª±" },
      ],
      clinic: [
        { id: "civil-center", name: "ADN D√¢n S·ª± - Thu T·∫°i Trung T√¢m", price: "2.000.000ƒë", time: "3-5 ng√†y", category: "D√¢n s·ª±" },
      ]
    },
    legal: {
      clinic: [
        { id: "legal-center", name: "ADN H√†nh Ch√≠nh - Thu T·∫°i Trung T√¢m", price: "3.500.000ƒë", time: "7-10 ng√†y", category: "H√†nh ch√≠nh" },
        { id: "legal-bone", name: "ADN H√†nh Ch√≠nh - Gi√°m ƒê·ªãnh H√†i C·ªët", price: "Li√™n h·ªá", time: "30+ ng√†y", category: "H√†nh ch√≠nh" },
      ]
    }
  };

  // L·∫•y g√≥i x√©t nghi·ªám duy nh·∫•t t·ª´ selectedService thay v√¨ t·∫•t c·∫£ g√≥i available
  const getSelectedServiceAsTestType = (): TestType | null => {
    if (!selectedService) return null;
    
    // T·∫°o TestType object t·ª´ selectedService
    return {
      id: selectedService.id,
      name: selectedService.title,
      price: selectedService.price,
      time: "3-7 ng√†y", // Default time, c√≥ th·ªÉ customize
      category: selectedService.category === 'civil' ? 'D√¢n s·ª±' : 'H√†nh ch√≠nh'
    };
  };

  // L·∫•y g√≥i x√©t nghi·ªám theo category c·ªßa service v√† h√¨nh th·ª©c thu m·∫´u ƒë√£ ch·ªçn (gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch)
  const getAvailableTestTypes = (): TestType[] => {
    const selectedTest = getSelectedServiceAsTestType();
    return selectedTest ? [selectedTest] : [];
  };

  // L·∫•y t·∫•t c·∫£ service types kh·∫£ d·ª•ng cho collectionMethod ƒë√£ ch·ªçn (ƒë·ªÉ validate)
  const getAvailableServiceTypes = (): string[] => {
    if (!selectedService) {
      // N·∫øu kh√¥ng c√≥ selectedService, tr·∫£ v·ªÅ c·∫£ hai option
      return ['home', 'clinic'];
    }
    
    const { collectionMethod } = selectedService;
    
    // D·ª±a v√†o collectionMethod ƒë·ªÉ tr·∫£ v·ªÅ service types kh·∫£ d·ª•ng
    if (collectionMethod === 0) {
      return ['home']; // collectionMethod 0 = ch·ªâ home
    } else if (collectionMethod === 1) {
      return ['clinic']; // collectionMethod 1 = ch·ªâ clinic
    }
    
    // Fallback: n·∫øu collectionMethod kh√¥ng r√µ, tr·∫£ v·ªÅ c·∫£ hai
    return ['home', 'clinic'];
  };

  // ƒê·∫øm s·ªë l∆∞·ª£ng service types c√≥ s·∫µn
  const getAvailableServiceTypesCount = (): number => {
    if (!selectedService) {
      // N·∫øu kh√¥ng c√≥ selectedService, hi·ªÉn th·ªã c·∫£ hai option
      return 2;
    }
    
    const { collectionMethod } = selectedService;
    
    // V·ªõi logic m·ªõi d·ª±a v√†o collectionMethod, lu√¥n ch·ªâ c√≥ 1 option
    // v√¨ m·ªói service ch·ªâ c√≥ 1 collectionMethod c·ªë ƒë·ªãnh
    if (collectionMethod === 0 || collectionMethod === 1) {
      return 1;
    }
    
    // Fallback: n·∫øu collectionMethod kh√¥ng r√µ, hi·ªÉn th·ªã c·∫£ hai option
    return 2;
  };

  // Ki·ªÉm tra xem c√≥ n√™n hi·ªÉn th·ªã service type kh√¥ng d·ª±a v√†o collectionMethod
  const shouldShowServiceType = (serviceType: string): boolean => {
    if (!selectedService) {
      // N·∫øu kh√¥ng c√≥ selectedService, hi·ªÉn th·ªã c·∫£ hai option (fallback cho compatibility)
      return ['home', 'clinic'].includes(serviceType);
    }
    
    const { collectionMethod } = selectedService;
    
    console.log('üîç Checking service type visibility:', {
      serviceType,
      collectionMethod,
      selectedService: selectedService.title
    });
    
    // D·ª±a v√†o collectionMethod ƒë·ªÉ quy·∫øt ƒë·ªãnh hi·ªÉn th·ªã
    if (collectionMethod === 0) {
      // collectionMethod 0 = T·ª± thu m·∫´u / Thu t·∫°i nh√†
      return serviceType === 'home';
    } else if (collectionMethod === 1) {
      // collectionMethod 1 = Thu m·∫´u t·∫°i trung t√¢m  
      return serviceType === 'clinic';
    }
    
    // Fallback: n·∫øu collectionMethod kh√¥ng r√µ, hi·ªÉn th·ªã c·∫£ hai option
    return ['home', 'clinic'].includes(serviceType);
  };

  const timeSlots = [
    "08:00",
    "08:30",
    "09:00",
    "09:30",
    "10:00",
    "10:30",
    "11:00",
    "11:30",
    "14:00",
    "14:30",
    "15:00",
    "15:30",
    "16:00",
    "16:30",
    "17:00",
  ];

  const handleInputChange = (field: keyof BookingData, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleSubmit = async () => {
    setLoading(true);
    setApiError(null);
    
    console.log('üöÄ SUBMIT STARTED - Form validation');
    console.log('Current form data:', formData);
    console.log('Selected service:', enhancedSelectedService || selectedService);
    
    // Validate testServiceId before making API call
    if (!validateTestServiceId()) {
      setApiError("C√≥ l·ªói v·ªõi d·ªãch v·ª• ƒë∆∞·ª£c ch·ªçn. Vui l√≤ng th·ª≠ ch·ªçn l·∫°i d·ªãch v·ª• t·ª´ trang tr∆∞·ªõc.");
      setLoading(false);
      return;
    }
    
    try {
      console.log('üîÑ Mapping form data to API request...');
      
      // Map form data to API request format (now async)
      const bookingRequest = await mapFormDataToBookingRequest(
        formData, 
        enhancedSelectedService || selectedService, // Use enhanced version if available
        undefined // Don't pass temp clientId, let API handle it
      );
      
      console.log('‚úÖ Request mapping successful, calling API...');
      
      // Call the API
      const result = await createBookingApi(bookingRequest);
      
      console.log('‚úÖ API call successful:', result);
      
      // Store the response for success step
      setBookingResponse(result);
      
      // Call onSubmit callback if provided
      if (onSubmit) {
        onSubmit(formData);
      }

      // Move to success step
      setStep(3);
    } catch (error) {
      console.error('‚ùå Booking creation failed:', error);
      
      // Handle validation errors (thrown by mapFormDataToBookingRequest)
      if (error instanceof Error) {
        const errorMessage = error.message;
        
        if (errorMessage.includes('Missing required')) {
          setApiError("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.");
        } else if (errorMessage.includes('Invalid priceServiceId')) {
          setApiError("ID d·ªãch v·ª• kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ ch·ªçn l·∫°i d·ªãch v·ª•.");
        } else if (errorMessage.includes('Invalid phone')) {
          setApiError("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i t·ª´ 10-15 ch·ªØ s·ªë.");
        } else if (errorMessage.includes('Name must be at least')) {
          setApiError("T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±.");
        } else if (errorMessage.includes('Appointment date must be in the future')) {
          setApiError("Ng√†y h·∫πn ph·∫£i l√† ng√†y trong t∆∞∆°ng lai.");
        } else if (errorMessage.includes('Invalid service ID format')) {
          setApiError("ID d·ªãch v·ª• kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ ch·ªçn l·∫°i d·ªãch v·ª•.");
        } else if (errorMessage.includes('Invalid date/time format')) {
          setApiError("ƒê·ªãnh d·∫°ng ng√†y/gi·ªù kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i ng√†y v√† gi·ªù.");
        } else if (errorMessage.includes('Unable to determine TestService ID')) {
          setApiError("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh d·ªãch v·ª•. Vui l√≤ng th·ª≠ ch·ªçn l·∫°i d·ªãch v·ª• t·ª´ trang tr∆∞·ªõc.");
        } else if (errorMessage.includes('Unable to get user ID')) {
          setApiError("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        } else if (errorMessage.includes('Unauthorized') || errorMessage.includes('401')) {
          setApiError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t l·ªãch. Vui l√≤ng ƒëƒÉng nh·∫≠p v√† th·ª≠ l·∫°i.");
        } else if (errorMessage.includes('TestService not found')) {
          setApiError("D·ªãch v·ª• b·∫°n ch·ªçn kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ch·ªçn l·∫°i d·ªãch v·ª•.");
        } else if (errorMessage.includes('An error occurred while saving the entity changes')) {
          setApiError("C√≥ l·ªói khi l∆∞u th√¥ng tin ƒë·∫∑t l·ªãch. C√≥ th·ªÉ do r√†ng bu·ªôc d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.");
        } else if (errorMessage.includes('400')) {
          // Extract more details from 400 errors
          let errorDetail = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p.";
          
          // Try to extract specific error from message
          if (errorMessage.includes('foreign key')) {
            errorDetail = "L·ªói li√™n k·∫øt d·ªØ li·ªáu. C√≥ th·ªÉ c·∫ßn ƒëƒÉng nh·∫≠p ho·∫∑c ch·ªçn l·∫°i d·ªãch v·ª•.";
          } else if (errorMessage.includes('constraint')) {
            errorDetail = "Vi ph·∫°m r√†ng bu·ªôc d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.";
          } else if (errorMessage.includes('null')) {
            errorDetail = "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc. Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß form.";
          }
          
          setApiError(errorDetail);
          console.error('400 Bad Request error:', errorMessage);
          console.error('Form data:', formData);
        } else {
          setApiError(`L·ªói: ${errorMessage}`);
        }
      } else {
        setApiError("ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } finally {
      setLoading(false);
    }
  };

  const validateStep1 = () => {
    return formData.serviceType && formData.testType && selectedService;
  };

  const validateStep2 = () => {
    return (
      formData.name &&
      formData.phone &&
      formData.preferredDate &&
      formData.preferredTime &&
      (formData.serviceType === "clinic" || formData.address)
    );
  };

  const resetForm = () => {
    setFormData({
      serviceType: "home",
      name: "",
      phone: "",
      address: "",
      preferredDate: "",
      preferredTime: "",
      notes: "",
      testType: "civil-self",
    });
    setStep(1);
    setApiError(null);
    setBookingResponse(null);
  };

  const handleClose = () => {
    resetForm();
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
      <div className="w-full max-w-2xl max-h-[95vh] overflow-y-auto">
        <Card className="bg-white border-0 shadow-2xl">
          {/* Header */}
          <CardHeader className="p-6 text-white rounded-t-lg bg-gradient-to-r from-blue-900 to-blue-700">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold">ƒê·∫∑t L·ªãch X√©t Nghi·ªám ADN</h2>
                <p className="text-white/90">
                  Ch·ªçn g√≥i x√©t nghi·ªám ADN v√† ph∆∞∆°ng th·ª©c thu m·∫´u ph√π h·ª£p
                </p>
              </div>
              <button
                type="button"
                title="ƒê√≥ng"
                onClick={handleClose}
                className="flex items-center justify-center w-8 h-8 transition-colors duration-200 rounded-full bg-white/20 hover:bg-white/30"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Progress Steps */}
            <div className="flex items-center justify-center mt-6 space-x-4">
              {[1, 2, 3].map((stepNum) => (
                <div key={stepNum} className="flex items-center">
                  <div
                    className={`w-8 h-8 rounded-full flex items-center justify-center font-semibold ${
                      step >= stepNum
                        ? "bg-white text-blue-900"
                        : "bg-white/20 text-white"
                    }`}
                  >
                    {step > stepNum ? (
                      <CheckCircleIcon className="w-5 h-5" />
                    ) : (
                      stepNum
                    )}
                  </div>
                  {stepNum < 3 && (
                    <div
                      className={`w-8 h-0.5 ${
                        step > stepNum ? "bg-white" : "bg-white/20"
                      }`}
                    ></div>
                  )}
                </div>
              ))}
            </div>
          </CardHeader>

          <CardContent className="p-6">
            {/* Step 1: Service Selection */}
            {step === 1 && (
              <div className="space-y-6">
                <div>
                  <h3 className="mb-4 text-lg font-semibold text-blue-900">
                    Ch·ªçn h√¨nh th·ª©c thu m·∫´u
                  </h3>
                  <div className={`grid gap-4 ${
                    getAvailableServiceTypesCount() === 1 
                      ? "grid-cols-1 place-items-center" 
                      : "grid-cols-1 md:grid-cols-2"
                  }`}>
                    {/* Service Type Options */}
                    {shouldShowServiceType('home') && (
                      <label className={`cursor-pointer ${
                        getAvailableServiceTypesCount() === 1 ? "max-w-md" : ""
                      }`}>
                        <input
                          type="radio"
                          name="serviceType"
                          value="home"
                          checked={formData.serviceType === "home"}
                          onChange={(e) =>
                            handleInputChange("serviceType", e.target.value)
                          }
                          className="sr-only"
                        />
                        <div
                          className={`p-6 border-2 rounded-lg transition-all duration-200 text-center ${
                            formData.serviceType === "home"
                              ? "border-blue-500 bg-blue-50"
                              : "border-gray-200 hover:border-blue-300"
                          }`}
                        >
                          <HomeIcon className="w-12 h-12 mx-auto mb-3 text-blue-600" />
                          <h4 className="mb-2 font-semibold text-slate-700">
                            T·ª± thu m·∫´u / Thu t·∫°i nh√†
                          </h4>
                          <p className="text-sm text-slate-600">
                            Nh·∫≠n b·ªô kit ADN ho·∫∑c nh√¢n vi√™n ƒë·∫øn t·∫≠n nh√† thu m·∫´u
                          </p>
                          <div className="mt-3 text-sm font-medium text-blue-600">
                            üß¨ {selectedService?.category === 'civil' ? 'Ph√π h·ª£p cho ADN D√¢n s·ª±' : 'Ph√π h·ª£p cho ADN H√†nh ch√≠nh'}
                          </div>
                        </div>
                      </label>
                    )}

                    {/* Clinic Service */}
                    {shouldShowServiceType('clinic') && (
                      <label className={`cursor-pointer ${
                        getAvailableServiceTypesCount() === 1 ? "max-w-md" : ""
                      }`}>
                        <input
                          type="radio"
                          name="serviceType"
                          value="clinic"
                          checked={formData.serviceType === "clinic"}
                          onChange={(e) =>
                            handleInputChange("serviceType", e.target.value)
                          }
                          className="sr-only"
                        />
                        <div
                          className={`p-6 border-2 rounded-lg transition-all duration-200 text-center ${
                            formData.serviceType === "clinic"
                              ? "border-blue-500 bg-blue-50"
                              : "border-gray-200 hover:border-blue-300"
                          }`}
                        >
                          <BuildingIcon className="w-12 h-12 mx-auto mb-3 text-blue-600" />
                          <h4 className="mb-2 font-semibold text-slate-700">
                            Thu m·∫´u t·∫°i trung t√¢m
                          </h4>
                          <p className="text-sm text-slate-600">
                            ƒê·∫øn trung t√¢m ƒë·ªÉ thu m·∫´u v·ªõi quy tr√¨nh chu·∫©n
                          </p>
                          <div className="mt-3 text-sm font-medium text-green-600">
                            ‚öñÔ∏è C√≥ gi√° tr·ªã ph√°p l√Ω
                          </div>
                        </div>
                      </label>
                    )}
                  </div>
                </div>

                <div>
                  <h3 className="mb-4 text-lg font-semibold text-blue-900">
                    Ch·ªçn g√≥i x√©t nghi·ªám ADN
                  </h3>
                  
                  {getAvailableTestTypes().length > 0 ? (
                    <div className="grid grid-cols-1 gap-3">
                      {getAvailableTestTypes().map((test) => (
                        <label key={test.id} className="cursor-pointer">
                          <input
                            type="radio"
                            name="testType"
                            value={test.id}
                            checked={formData.testType === test.id}
                            onChange={(e) =>
                              handleInputChange("testType", e.target.value)
                            }
                            className="sr-only"
                          />
                          <div
                            className={`p-4 border-2 rounded-lg transition-all duration-200 ${
                              formData.testType === test.id
                                ? "border-blue-500 bg-blue-50"
                                : "border-gray-200 hover:border-blue-300"
                            }`}
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <div className="font-medium text-slate-700">
                                  {test.name}
                                </div>
                                <div className="flex items-center gap-4 mt-1 text-sm text-slate-600">
                                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                    test.category === 'D√¢n s·ª±' 
                                      ? 'bg-green-100 text-green-700' 
                                      : 'bg-blue-100 text-blue-700'
                                  }`}>
                                    {test.category}
                                  </span>
                                  <span>‚è±Ô∏è {test.time}</span>
                                </div>
                              </div>
                              <span className="font-semibold text-blue-900">
                                {test.price}
                              </span>
                            </div>
                          </div>
                        </label>
                      ))}
                    </div>
                  ) : (
                    <div className="p-6 text-center border-2 border-dashed border-gray-300 rounded-lg bg-gray-50">
                      <p className="text-gray-500">
                        Vui l√≤ng ch·ªçn h√¨nh th·ª©c thu m·∫´u ƒë·ªÉ xem c√°c g√≥i x√©t nghi·ªám c√≥ s·∫µn
                      </p>
                    </div>
                  )}
                </div>

                <div className="flex justify-end">
                  <Button
                    onClick={() => setStep(2)}
                    disabled={!validateStep1()}
                    className="px-8 py-3 !text-white bg-blue-900 hover:bg-blue-800"
                  >
                    Ti·∫øp Theo
                  </Button>
                </div>
              </div>
            )}

            {/* Step 2: Information Form */}
            {step === 2 && (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold text-blue-900">
                  Th√¥ng tin li√™n h·ªá v√† ƒë·∫∑t l·ªãch
                </h3>

                {/* Authentication Warning */}
                {!isAuthenticated() && (
                  <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <div className="flex items-center">
                      <AlertCircleIcon className="w-5 h-5 mr-2 text-yellow-600" />
                      <p className="text-sm text-yellow-800">
                        <strong>L∆∞u √Ω:</strong> B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. ƒê·ªÉ ƒë·∫∑t l·ªãch th√†nh c√¥ng, vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ti·∫øp t·ª•c.
                      </p>
                    </div>
                  </div>
                )}

                <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <label className="flex items-center text-sm font-semibold text-blue-900">
                      <UserIcon className="w-4 h-4 mr-2" />
                      H·ªç v√† T√™n *
                    </label>
                    <Input
                      type="text"
                      value={formData.name}
                      onChange={(e) =>
                        handleInputChange("name", e.target.value)
                      }
                      placeholder="Nh·∫≠p h·ªç v√† t√™n"
                      className="w-full"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="flex items-center text-sm font-semibold text-blue-900">
                      <PhoneIcon className="w-4 h-4 mr-2" />
                      S·ªë ƒëi·ªán tho·∫°i *
                    </label>
                    <Input
                      type="tel"
                      value={formData.phone}
                      onChange={(e) =>
                        handleInputChange("phone", e.target.value)
                      }
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                      className="w-full"
                    />
                  </div>



                  {formData.serviceType === "home" && (
                    <div className="space-y-2 md:col-span-2">
                      <label className="flex items-center text-sm font-semibold text-blue-900">
                        <MapPinIcon className="w-4 h-4 mr-2" />
                        ƒê·ªãa ch·ªâ nh·∫≠n kit / Thu m·∫´u *
                      </label>
                      <Input
                        type="text"
                        value={formData.address}
                        onChange={(e) =>
                          handleInputChange("address", e.target.value)
                        }
                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠n b·ªô kit ADN ho·∫∑c ƒë·ªãa ch·ªâ thu m·∫´u t·∫°i nh√†"
                        className="w-full"
                      />
                    </div>
                  )}

                  <div className="space-y-2">
                    <label className="flex items-center text-sm font-semibold text-blue-900">
                      <CalendarIcon className="w-4 h-4 mr-2" />
                      Ng√†y mong mu·ªën *
                    </label>
                    <Input
                      type="date"
                      value={formData.preferredDate}
                      onChange={(e) =>
                        handleInputChange("preferredDate", e.target.value)
                      }
                      min={new Date().toISOString().split("T")[0]}
                      className="w-full"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="flex items-center text-sm font-semibold text-blue-900">
                      <ClockIcon className="w-4 h-4 mr-2" />
                      Th·ªùi gian mong mu·ªën *
                    </label>
                    <select
                      value={formData.preferredTime}
                      onChange={(e) =>
                        handleInputChange("preferredTime", e.target.value)
                      }
                      className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none"
                    >
                      <option value="">Ch·ªçn th·ªùi gian</option>
                      {timeSlots.map((time) => (
                        <option key={time} value={time}>
                          {time}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div className="space-y-2 md:col-span-2">
                    <label className="flex items-center text-sm font-semibold text-blue-900">
                      <AlertCircleIcon className="w-4 h-4 mr-2" />
                      L∆∞u √Ω th√™m
                    </label>
                    <textarea
                      value={formData.notes}
                      onChange={(e) =>
                        handleInputChange("notes", e.target.value)
                      }
                      placeholder="V√≠ d·ª•: C·∫ßn x√©t nghi·ªám cha con, m·∫π con... ho·∫∑c y√™u c·∫ßu ƒë·∫∑c bi·ªát kh√°c"
                      className="w-full h-24 p-3 border-2 border-gray-200 rounded-lg resize-none focus:border-blue-500 focus:outline-none"
                    />
                  </div>
                </div>

                {/* Error Display */}
                {apiError && (
                  <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                    <div className="flex items-center">
                      <AlertCircleIcon className="w-5 h-5 mr-2 text-red-600" />
                      <p className="text-sm text-red-800">{apiError}</p>
                    </div>
                  </div>
                )}

                <div className="flex justify-between">
                  <Button
                    onClick={() => setStep(1)}
                    variant="outline"
                    className="px-6 py-3 text-gray-700 border-gray-300 hover:bg-gray-50"
                  >
                    Quay L·∫°i
                  </Button>
                  <Button
                    onClick={handleSubmit}
                    disabled={!validateStep2() || loading}
                    className="px-8 py-3 !text-white bg-blue-900 hover:bg-blue-800"
                  >
                    {loading ? (
                      <div className="flex items-center !text-white">
                        <div className="w-5 h-5 mr-2 border-2 rounded-full border-white/30 border-t-white animate-spin"></div>
                        ƒêang x·ª≠ l√Ω...
                      </div>
                    ) : (
                      "X√°c Nh·∫≠n ƒê·∫∑t L·ªãch"
                    )}
                  </Button>
                </div>
              </div>
            )}

            {/* Step 3: Success */}
            {step === 3 && (
              <div className="py-8 text-center">
                <CheckCircleIcon className="w-16 h-16 mx-auto mb-4 text-green-500" />
                <h3 className="mb-2 text-2xl font-bold text-green-600">
                  ƒêƒÉng k√Ω th√†nh c√¥ng!
                </h3>
                <p className="mb-6 text-slate-600">
                  {bookingResponse?.message || 
                   "Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu x√©t nghi·ªám ADN c·ªßa b·∫°n. Nh√¢n vi√™n t∆∞ v·∫•n s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 30 ph√∫t ƒë·ªÉ x√°c nh·∫≠n v√† h∆∞·ªõng d·∫´n chi ti·∫øt."}
                </p>
                <div className="p-4 mb-6 rounded-lg bg-blue-50">
                  <p className="text-sm text-blue-800">
                    <strong>M√£ ƒëƒÉng k√Ω:</strong> {bookingResponse?.id || `ADN${Date.now().toString().slice(-6)}`}
                  </p>
                  <p className="mt-1 text-sm text-blue-800">
                    <strong>Th·ªùi gian:</strong> {formData.preferredDate} l√∫c{" "}
                    {formData.preferredTime}
                  </p>
                  <p className="mt-1 text-sm text-blue-800">
                    <strong>Kh√°ch h√†ng:</strong> {formData.name}
                  </p>
                  <p className="mt-1 text-sm text-blue-800">
                    <strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {formData.phone}
                  </p>
                </div>
                <Button
                  onClick={handleClose}
                  className="px-8 py-3 !text-white bg-blue-900 hover:bg-blue-800"
                >
                  ƒê√≥ng
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};
